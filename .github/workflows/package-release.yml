name: Package and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  package-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: koko-binary
          path: target/release

      - name: Make binary executable
        run: chmod +x target/release/koko

      - name: Prepare package structure
        run: |
          # Create package directory structure
          mkdir -p .debpkg/usr/bin
          mkdir -p .debpkg/usr/share/koko
          mkdir -p .debpkg/DEBIAN
          
          # Copy binary
          cp target/release/koko .debpkg/usr/bin/
          
          # Create postinst script
          cat > .debpkg/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e
          
          # Create data directories
          mkdir -p /usr/share/koko
          
          # Function to download and verify file
          download_and_verify() {
              local url="$1"
              local file_path="$2"
              local hash_url="$3"
              
              echo "Downloading $(basename "$file_path")..."
              
              # Download file
              if ! wget -O "$file_path" "$url"; then
                  echo "WARNING: Failed to download $(basename "$file_path")"
                  echo "Please download it manually from: $url"
                  return 1
              fi
              
              # Download hash if available
              if wget -O "$file_path.sha256" "$hash_url" 2>/dev/null; then
                  # Verify hash
                  echo "Verifying $(basename "$file_path")..."
                  if ! sha256sum -c "$file_path.sha256" 2>/dev/null; then
                      echo "WARNING: Hash verification failed for $(basename "$file_path")"
                      return 1
                  fi
                  echo "$(basename "$file_path") verified successfully"
              else
                  echo "No hash available for $(basename "$file_path"), skipping verification"
              fi
              
              return 0
          }
          
          # Download model files to the standard location where the app expects them
          echo "Downloading Kokoro model files..."
          
          download_and_verify \
              "https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.0/kokoro-v1.0.onnx" \
              "/usr/share/koko/kokoro-v1.0.onnx" \
              "https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.0/kokoro-v1.0.onnx.sha256" || true
              
          download_and_verify \
              "https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.0/voices-v1.0.bin" \
              "/usr/share/koko/voices-v1.0.bin" \
              "https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.0/voices-v1.0.bin.sha256" || true
          
          # Set permissions
          chmod 644 /usr/share/koko/kokoro-v1.0.onnx 2>/dev/null || true
          chmod 644 /usr/share/koko/voices-v1.0.bin 2>/dev/null || true
          chmod 644 /usr/share/koko/kokoro-v1.0.onnx.sha256 2>/dev/null || true
          chmod 644 /usr/share/koko/voices-v1.0.bin.sha256 2>/dev/null || true
          
          echo "Kokoro installation completed."
          echo "Model files have been downloaded to /usr/share/koko/"
          echo "If any download fails, you can manually download the files from:"
          echo "  Model: https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.0/kokoro-v1.0.onnx"
          echo "  Voices: https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.0/voices-v1.0.bin"
          
          exit 0
          EOF
          
          chmod 755 .debpkg/DEBIAN/postinst
          
          # Create postrm script
          cat > .debpkg/DEBIAN/postrm << 'EOF'
          #!/bin/bash
          set -e
          
          # Remove data files on purge
          if [ "$1" = "purge" ]; then
              rm -rf /usr/share/koko
          fi
          
          exit 0
          EOF
          
          chmod 755 .debpkg/DEBIAN/postrm

      - name: Set package version
        run: |
          PACKAGE_VERSION=$(grep '^version =' koko/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Build Debian package using build-deb-action
        uses: jiro4989/build-deb-action@v4
        with:
          package: koko
          package_root: .debpkg
          maintainer: James Smith <lunchboxer@disroot.org>
          version: ${{ env.PACKAGE_VERSION }}
          arch: 'amd64'
          depends: 'wget, coreutils'
          section: 'sound'
          priority: 'optional'
          desc: |
            Kokoro TTS - insanely fast text-to-speech engine
            Koko is a blazingly fast text-to-speech engine powered by the Kokoro ONNX model.
            Supports multiple languages including English, Chinese, Japanese, and German.
            
            This package will automatically download the required model files to /usr/share/koko/
            on first installation. If the download fails, you can manually download the files from:
            https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.0/
        id: build_deb

      - name: Rename Debian package
        run: |
          mv ${{ steps.build_deb.outputs.file_name }} koko_${{ env.PACKAGE_VERSION }}_amd64.deb

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/koko
          asset_name: koko-${{ github.ref_name }}-linux-amd64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Debian package asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./koko_${{ github.ref_name }}_amd64.deb
          asset_name: koko_${{ github.ref_name }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
